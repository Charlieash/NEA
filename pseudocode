#NEA
IMPORT mysql.connector				   						#Imports the connector to mysql so that the program can access the database
IMPORT datetime						   						#imports datetime format
	
mydb = mysql.connector.connect(
	host="localhost",                  						#opens an instance of connection to the database
	user="root",
	passwd="LucieLeia0804",
	database="mydb",
	)
mycursor = mydb.cursor()               						#Creates a reference for the database so that it can be accessed by other functions

FUNCTION StartUp():					   						#Function to get all the data from the file, format it, create EndTime and get the Ids for everything
    Info = []
    WITH OPEN("data.txt","r") as File: 						#Opens file 
        FOR row IN File:
            Info.APPEND(row)           						#Appends the data in the file to an array
    StartLocation = Info[0]			   						#Get the starting location for the bus
    EndLocation = Info[1] 			   						#Get the end location for the bus
    StartTime = Info[2] 			   						#Get the wanted arrival time
    IF ":" NOT IN StartTime:		   						#Checks to see if the time has a colon in it
        ErrorCaught()				   						#Shows error page if 
    StartTime = StartTime.split(":")   						#Spilts the Start time into two numbers
    EndTime = []					   						#creates the array EndTime
    EndTime.APPEND(INTEGER(StartTime[0])+1) 				#no one wants to wait for a bus for longer than an hour
    EndTime.APPEND(StartTime[1])							#The minutes for end time are the same as start time 
    EndTime = STRING(EndTime[0])+ ":" + STRING(EndTime[1])	#Puts end time in the correct format of a string 
    StartTime = StartTime[0] +":"+ StartTime[1]				#reformats the start time variable 
    StartTime = StartTime.RSTRIP()							#Strips the /n s from Start time, End time, StartLocation and Endlocation 
    EndTime = EndTime.RSTRIP()								
    StartLocation = StartLocation.RSTRIP()
    EndLocation = EndLocation.RSTRIP()
    Location = LocationId(StartLocation, EndLocation)		#Runs the Function 
    StartLocationId= Location[0]							#Creates the variable StartLocationId from the Location function 
    EndLocationId = Location[1]								#Creates the variable EndLocationId from the Location function 
    RETURN(StartLocation, EndLocation, StartTime, EndTime, StartLocationId, EndLocationId)	#returns a lot of variables 

FUNCTION LocationId(StartLocation, EndLocation, mycursor):	#Defines the function LocationId
    mycursor.EXECUTE(("SELECT idStop FROM stop WHERE StopName = '{}'").FORMAT(StartLocation))#searches the database for the id of the stop
    StartLocationId = mycursor.FETCHALL()					#Defines StartLocationId as the returned id
    StartLocationId = STRING(StartLocationId[0]).REMOVE(","))#removes all commas from the string
    StartLocationId = STRING(StartLocationId).REMOVE("("))	#removes all open brackets from the string
    StartLocationId = STRING(StartLocationId).REMOVE(")"))	#removes all close brackets from the string 
    StartLocationId = INTEGER(StartLocationId)				#converts the id to an integer 
    mycursor.EXECUTE(("SELECT idStop FROM stop WHERE StopName = '{}'").FORMAT(EndLocation)) #selects all stop ids from the given stopname 
    EndLocationId = mycursor.FETCHALL()						#Defines the search result as EndLocationId
    EndLocationId = STRING(EndLocationId[0]).REMOVE(",")	#removes all commas from the Endlocationid 
    EndLocationId = STRING(EndLocationId).REMOVE("(")		#removes all open brackets from EndLocationId
    EndLocationId = STRING(EndLocationId).REMOVE(")") 		#removes all close brackets from EndLocationId
    EndLocationId = INTEGER(EndLocationId)					#converts the string Id to an integer
    RETURN(StartLocationId, EndLocationId)					#Returns StartLocationId and EndLocationId from the function

FUNCTION Timerange(TimeStart, TimeEnd, StartLocationId, mycursor): #defines the funtions Timerange with parameters TimeStart, TimeEnd, StartLocationId and mycursor
    mycursor.EXECUTE(("""SELECT Routeid FROM times WHERE Time > '{}' AND Time < '{}' AND StopID = '{}'""").FORMAT(TimeStart ,TimeEnd ,StartLocationId))  #searches the databases FOR all routes leavINg the given stop within the time RANGE
    Routes = mycursor.FETCHALL()							#fetches all results from the search and defines them as Routes 
    FOR i IN RANGE(LENGTH(Routes)):							#Loops through the list Routes 
        Routes[i] = STRING(Routes[i][0]).REMOVE(",")		#removes the commas from the current value in routes
        Routes[i] = STRING(Routes[i]).REMOVE("(")			#removes the open brackets from the current value in routes			
        Routes[i] = STRING(Routes[i]).REMOVE(")")			#removes the close brackets from the current value in routes
        Routes[i] = INTEGER(Routes[i])						#converts the target string back to an integer
    RETURN(Routes)											#returns the resulting list from the function 

FUNCTION convert_timedelta(Times):							#function to convert from the timedelta to normal time so it can be understood
    days, seconds = Times.days, Times.seconds				
    hours = days * 24 + seconds // 3600
    minutes = (seconds % 3600) // 60
    seconds = (seconds % 60)
    RETURN hours, minutes, seconds
    td = datetime.timedelta(2, 7743, 12345)
    hours, minutes, seconds = convert_timedelta(td)
    PRINT ('{} minutes, {} hours'.FORMAT(minutes, hours))	#prints the result in the correct format 


FUNCTION OneBus(routes,TimeStart, TimeEnd, StartLocationId , EndLocationId, mycursor): #defines the funtion OneBus which 
    RoutesInTime=[]											#creates the empty string RoutesInTime
    FOR u IN RANGE(LENGTH(routes)):
        mycursor.EXECUTE(("SELECT Time from times WHERE StopId = '{}' AND RouteID = '{}' AND Time > '{}' AND Time < '{}'").FORMAT(StartLocationId,routes[u], TimeStart, TimeEnd)) #Finds the time of the bus within the time range 
        Times = mycursor.FETCHALL() 						#defines the result from the above search as Times 
        Times = STRING(Times[0]).REMOVE(",")				#formats Times appropriately so that it can be understood by the program and users 
        Times = STRING(Times).REMOVE("(")
        Times = STRING(Times).REMOVE(")") 
        convert_timedelta(Times)							#converts the time from the timedelta format to a format that can be understood by the user
        mycursor.EXECUTE(("SELECT RouteId FROM times WHERE StopId = {} AND RouteId = {} AND Time>{}").FORMAT(EndLocationId,routes[u],Times)) #selects the routes from all routes leaving the bus stop IN the time RANGE which end at the wanted bus stop
        RoutesInTime = mycursor.FETCHALL()					#appends the final product to a list
    RETURN(RoutesInTime) 									#returns the finished product 



FUNCTION MultipleBusses(routes,TimeStart, TimeEnd, results, mycursor):#this funtion exists to check if their is a route consisting of multiple busses to get to the end location 
    List = routes											#creates a backup of routes called List 
    reference = []
    FOR i IN RANGE(LENGTH(List)):							#loops through the length of the List 
        mycursor.EXECUTE("SELECT StopId FROM times WHERE RouteId = {}").FORMAT(List[i]) #Selects each stop with the same route as the current route id
        StartLocations = mycursor.FETCHALL()				#fetches all the Locations with the same route in their timetable 
		FOR o IN RANGE(LENGTH(List)):						#loops through all the Locations 
			StartLocation = StartLocations[o]				#defines StartLocation as the current value of StartLocations[o]
			Location = LocationId(StartLocation, EndLocation)#Gets the Locationid 
			StartLocationId=Location[0]						#Defines StartLocationId as the result from LocationId function 					
			routes = Timerange(TimeStart, TimeEnd, StartLocationId) #Gets the timerange using the function TimeRange 
			RoutesInTime= OneBus(routes,TimeStart, TimeEnd, StartLocationId , EndLocationId) #Finds all the routes in time 
			results.APPEND(RoutesInTime) 					#appends the Routes in the time range to a list called results 
		reference.APPEND(List[i])							#appends the current route to a list as a reference 
    RETURN(results, reference)



DataInput = StartUp()										#defines the results from StartUp function as a list 
TimeStart = DataInput[2]									#defines TimeStart as StartTime from the funtion StartUp
TimeEnd = DataInput[3]										#defines TimeEnd as EndTime from the funtion StartUp
EndLocation = DataInput[1]									#defines EndLocation as EndLocation from the funtion StartUp
StartLocation = DataInput[0]								#defines StartLocation as StartLocation from the funtion StartUp
StartLocationId = DataInput[4]								#defines StartLocationId as StartLocationId from the funtion StartUp
EndLocationId = DataInput[5]								#defines EndLocationId as EndLocationId from the funtion StartUp
routes = Timerange(TimeStart, TimeEnd, StartLocationId, mycursor) #Finds all routes going from the starting bus stop in the time range 
results = OneBus(routes,TimeStart, TimeEnd, StartLocationId, EndLocationId, mycursor) #Finds all the routes from Timerange that end at the final location 
results = MultipleBusses(routes,TimeStart, TimeEnd, results, mycursor) #loops through all the other stops that the route went through to find if they have any routes that end in the correct bus stop
PRINT(results) 												#displays the final results 